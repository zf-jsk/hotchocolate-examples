schema
  @core(feature: "https://specs.apollo.dev/core/v0.2"),
  @core(feature: "https://specs.apollo.dev/join/v0.1", for: EXECUTION)
{
  query: Query
}

directive @core(as: String, feature: String!, for: core__Purpose) repeatable on SCHEMA

"""
The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`.
"""
directive @defer(
  """Deferred when true."""
  if: Boolean

  """
  If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to.
  """
  label: String
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

directive @join__field(graph: join__Graph, provides: join__FieldSet, requires: join__FieldSet) on FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__owner(graph: join__Graph!) on INTERFACE | OBJECT

directive @join__type(graph: join__Graph!, key: join__FieldSet) repeatable on INTERFACE | OBJECT

"""
The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`.
"""
directive @stream(
  """Streamed when true."""
  if: Boolean

  """The initial elements that shall be send down to the consumer."""
  initialCount: Int! = 0

  """
  If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to.
  """
  label: String
) on FIELD

"""The `DateTime` scalar represents an ISO-8601 compliant date time type."""
scalar DateTime @specifiedBy(url: "https://www.graphql-scalars.com/date-time")

type InventoryInfo {
  isInStock: Boolean!
  upc: Int!
}

type Product {
  name: String!
  price: Int!
  upc: Int!
  weight: Int!
}

type Query {
  inventoryInfo(upc: Int!): InventoryInfo! @join__field(graph: INVENTORY)
  product(upc: Int!): Product! @join__field(graph: PRODUCTS)
  reviews: [Review!]! @join__field(graph: REVIEWS)
  reviewsByAuthor(authorId: Int!): [Review!]! @join__field(graph: REVIEWS)
  reviewsByProduct(upc: Int!): [Review!]! @join__field(graph: REVIEWS)
  shippingEstimate(price: Int!, weight: Int!): Float! @join__field(graph: INVENTORY)
  topProducts(first: Int!): [Product!]! @join__field(graph: PRODUCTS)
  user(id: Int!): User! @join__field(graph: ACCOUNTS)
  users: [User!]! @join__field(graph: ACCOUNTS)
}

type Review {
  authorId: Int!
  body: String!
  id: Int!
  upc: Int!
}

type User {
  birthdate: DateTime!
  id: Int!
  name: String!
  username: String!
}

enum core__Purpose {
  """
  `EXECUTION` features provide metadata necessary to for operation execution.
  """
  EXECUTION

  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY
}

scalar join__FieldSet

enum join__Graph {
  ACCOUNTS @join__graph(name: "accounts" url: "http://tvs.localtest.me/accounts/graphql")
  INVENTORY @join__graph(name: "inventory" url: "http://localhost:5052/graphql")
  PRODUCTS @join__graph(name: "products" url: "http://localhost:5053/graphql")
  REVIEWS @join__graph(name: "reviews" url: "http://localhost:5054/graphql")
}
